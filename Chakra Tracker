<!DOCTYPE html>
<html>
<head>
<title>Chakra Tracker</title>
<style>
body {
    font-family: sans-serif;
}
</style>
</head>
<body>
    <h1>Chakra Tracker</h1>

    <div>
        Max Chakra: <input type="number" id="maxChakra" value="10">
        Replenish Rate: <input type="number" id="replenishRate" value="0">
        <button onclick="initializeTracker()">Initialize</button>
    </div>

    <div id="chakraInfo">
        Current Chakra: <span id="currentChakra">0</span>/<span id="maxChakraDisplay">0</span>
    </div>

    <div>
        Jutsu Name: <input type="text" id="jutsuName">
        Chakra Cost: <input type="number" id="jutsuCost">
        <button onclick="addJutsu()">Add Jutsu</button>
    </div>

    <div>
        Jutsu to Use/Remove: <input type="text" id="jutsuToUseRemove">
        <button onclick="useJutsu()">Use Jutsu</button>
        <button onclick="removeJutsu()">Remove Jutsu</button>
    </div>

    <div>
        <button onclick="displayJutsuList()">Display Jutsu List</button>
        <button onclick="recoverChakra()">Recover Chakra</button>
    </div>

    <div id="jutsuList">
        <h2>Available Jutsu:</h2>
        <ul id="jutsuItems"></ul>
    </div>

    <script>
        let chakraTracker;

        function initializeTracker() {
            const maxChakra = parseInt(document.getElementById("maxChakra").value);
            const replenishRate = parseFloat(document.getElementById("replenishRate").value);
            chakraTracker = new ChakraTracker(maxChakra, replenishRate);
            updateDisplay();
        }

        class ChakraTracker {
            constructor(maxChakra, replenishRate = 0) {
                this.maxChakra = maxChakra > 0? maxChakra: 10;
                this.replenishRate = replenishRate >= 0? replenishRate: 0;
                this.currentChakra = this.maxChakra;
                this.lastReplenishTime = Date.now();
                this.jutsuList = {};
            }

            replenish() {
                const now = Date.now();
                const timeElapsed = Math.floor((now - this.lastReplenishTime) / 1000); // in seconds

                if (this.replenishRate > 0 && timeElapsed >= 1) {
                    const replenishAmount = this.replenishRate * timeElapsed;
                    this.currentChakra = Math.min(this.currentChakra + replenishAmount, this.maxChakra);
                    this.lastReplenishTime = now;
                }
            }

            useChakra(amount) {
                this.replenish();
                if (amount > 0 && amount <= this.currentChakra) {
                    this.currentChakra -= amount;
                    return true;
                }
                return false;
            }

            recoverChakra() {
                let amount = parseInt(prompt("Enter amount to recover:"));
                if (!isNaN(amount) && amount > 0) {
                    this.replenish();
                    this.currentChakra = Math.min(this.currentChakra + amount, this.maxChakra);
                    updateDisplay();
                } else {
                    alert("Invalid recovery amount.");
                }
            }

            addJutsu() {
                const jutsuName = document.getElementById("jutsuName").value;
                const chakraCost = parseInt(document.getElementById("jutsuCost").value);
                if (jutsuName &&!isNaN(chakraCost) && chakraCost > 0) {
                    this.jutsuList[jutsuName] = chakraCost;
                    updateDisplay();
                } else {
                    alert("Invalid jutsu name or chakra cost.");
                }
            }

            useJutsu() {
                const jutsuName = document.getElementById("jutsuToUseRemove").value;
                if (this.jutsuList[jutsuName]) {
                    if (this.useChakra(this.jutsuList[jutsuName])) {
                        updateDisplay();
                    } else {
                        alert("Not enough chakra for " + jutsuName + "!");
                    }
                } else {
                    alert("Jutsu not found.");
                }
            }

            removeJutsu() {
                const jutsuName = document.getElementById("jutsuToUseRemove").value;
                if (this.jutsuList[jutsuName]) {
                    delete this.jutsuList[jutsuName];
                    updateDisplay();
                } else {
                    alert("Jutsu not found.");
                }
            }

            displayJutsuList() {
                const jutsuListElement = document.getElementById("jutsuItems");
                jutsuListElement.innerHTML = ""; // Clear previous list
                for (const jutsu in this.jutsuList) {
                    const li = document.createElement("li");
                    li.textContent = `${jutsu}: ${this.jutsuList[jutsu]} chakra`;
                    jutsuListElement.appendChild(li);
                }
            }
        }

        function updateDisplay() {
            if (chakraTracker) {
                chakraTracker.replenish();
                document.getElementById("currentChakra").textContent = chakraTracker.currentChakra;
                document.getElementById("maxChakraDisplay").textContent = chakraTracker.maxChakra;
            }
        }

        // Initialize the tracker (you can remove this if you want manual initialization)
        // initializeTracker();

        // Update chakra display periodically (adjust interval as needed)
        setInterval(updateDisplay, 1000);
    </script>
</body>
</html>
